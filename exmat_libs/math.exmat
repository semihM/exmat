
rule Positive(x) x > 0

rule NonZero(x) x != 0

rule Negative(x) x < 0

seq Factorial(0:1.0, 1:1.0) n * Factorial(n-1)

// Add results of given function using range(m,n+1)
function SumOf(func,m=0,n=0)
{
    ::assert(type(func) == "CLOSURE", "expected function as first argument")

    var pcount = func.n_params;

    var total = 0;

    if(pcount == 0)
    {
        for(var i = m; i <= n ; i++)
        {
            total += func()
        }
    }
    else if(pcount == 1)
    {
        for(var i = m; i <= n ; i++)
        {
            total += func(i)
        }
    }
    else if(pcount == 2)
    {
        for(var i = m; i <= n ; i++)
        {
            total += func(i,m)
        }
    }
    else
    {
        ::assert(func.n_minargs <= 3,"given function require at least "+func.n_minargs+" arguments")

        for(var i = m; i <= n ; i++)
        {
            total += func(i,m,n)
        }
    }
    return total;
}

// Multiply results of given function using range(m,n+1)
function MulOf(func,m=0,n=0)
{
    ::assert(type(func) == "CLOSURE", "expected function as first argument")

    var pcount = func.n_params;

    var total = 1;

    if(pcount == 0)
    {
        for(var i = m; i <= n ; i++)
        {
            total *= func()
        }
    }
    else if(pcount == 1)
    {
        for(var i = m; i <= n ; i++)
        {
            total *= func(i)
        }
    }
    else if(pcount == 2)
    {
        for(var i = m; i <= n ; i++)
        {
            total *= func(i,m)
        }
    }
    else
    {
        ::assert(func.n_minargs <= 3,"given function require at least "+func.n_minargs+" arguments")

        for(var i = m; i <= n ; i++)
        {
            total *= func(i,m,n)
        }
    }
    return total;
}

function Identity(n)    return matrix(n,n,$(i,j) i == j ? 1 : 0)

function RandIMat(x,y,m=0,n=2)    return matrix(x,y,$(i,j) rand(m,n))

function RandFMat(x,y,m=0,n=1)    return matrix(x,y,$(i,j) randf(m,n))    

function Combination(n, r)  return Factorial(n) / (Factorial(r) * Factorial(n-r))

function Permutation(n, r)  return Factorial(n) / Factorial(n-r)

function Intersection(arr1, arr2)
{
    ::assert(typeof arr1 is "ARRAY", "expected list as first argument")
    ::assert(typeof arr2 is "ARRAY", "expected list as second argument")

    var lis = [];
    var l = arr2.len()
    for(var i = 0; i < l; i++)
    {
        if(arr2[i] in arr1)
            lis.append(arr2[i])
    }
    
    return lis
}

function Union(arr1, arr2)
{
    ::assert(typeof arr1 is "ARRAY", "expected list as first argument")
    ::assert(typeof arr2 is "ARRAY", "expected list as second argument")

    var lis = arr1.copy();
    var l = arr2.len()
    for(var i = 0; i < l; i++)
    {
        if(arr2[i] not in arr1)
            lis.append(arr2[i])
    }

    return lis
}

class Vector3D
{
    init(_x=0,_y=0,_z=0)
    {
        ::assert(_x in @R@, "expected numeric value for 'x' of 'Vector3D'")
        ::assert(_y in @R@, "expected numeric value for 'y' of 'Vector3D'")
        ::assert(_z in @R@, "expected numeric value for 'z' of 'Vector3D'")
        this.x = _x;
        this.y = _y;
        this.z = _z;
    }
    
    /. 
        is_coordinate = true 
    ./
    x = 0;

    /. 
        is_coordinate = true 
    ./
    y = 0;

    /. 
        is_coordinate = true 
    ./
    z = 0;

    function Length()
    {
        return (this.x**2 + this.y**2 + this.z**2)**0.5
    }

    function Scale(scale)
    {
        ::assert(scale in @R@, "expected numeric value for 'Scale' of 'Vector3D'")

        return Vector3D(this.x * scale, this.y * scale, this.z * scale);;
    }

    // Meta methods
    function _ADD(vec)
    {
        ::assert(vec instanceof Vector3D, "expected 'Vector3D' type for '+' of 'Vector3D'")

        return Vector3D(this.x + vec.x, this.y + vec.y, this.z + vec.z);
    }

    function _SUB(vec)
    {
        ::assert(vec instanceof Vector3D, "expected 'Vector3D' type for '-' of 'Vector3D'")

        return Vector3D(this.x - vec.x, this.y - vec.y, this.z - vec.z);
    }

    function _MLT(vec)
    {
        ::assert(vec instanceof Vector3D, "expected 'Vector3D' type for '*' of 'Vector3D'")

        return Vector3D(this.x * vec.x, this.y * vec.y, this.z * vec.z);
    }

    function _DIV(vec)
    {
        ::assert(vec instanceof Vector3D, "expected 'Vector3D' type for '/' of 'Vector3D'")

        return Vector3D(this.x / vec.x, this.y / vec.y, this.z / vec.z);
    }

    function _MOD(vec)
    {
        ::assert(vec instanceof Vector3D, "expected 'Vector3D' type for '%' of 'Vector3D'")

        return Vector3D(this.x % vec.x, this.y % vec.y, this.z % vec.z);
    }

    function _EXP(vec)
    {
        ::assert(vec instanceof Vector3D, "expected 'Vector3D' type for '%' of 'Vector3D'")

        return Vector3D(this.x ** vec.x, this.y ** vec.y, this.z ** vec.z);
    }

    function _STRING()
    {
        return "Vector3D("+this.x+", "+this.y+", "+this.z+")";
    }
    //

    function Dot(vec)
    {
        ::assert(vec instanceof Vector3D, "expected 'Vector3D' type for 'Dot' of 'Vector3D'")

        return (this.x * vec.x + this.y * vec.y + this.z * vec.z);
    }

    function Cross(vec)
    {
        ::assert(vec instanceof Vector3D, "expected 'Vector3D' type for 'Cross' of 'Vector3D'")

        return Vector3D(this.y * vec.z - this.z * vec.y, this.z * vec.x - this.x * vec.z, this.x * vec.y - this.y * vec.x);
    }

    function AngleBetween(vec)
    {
        ::assert(vec instanceof Vector3D, "expected 'Vector3D' type for 'AngleBetween' of 'Vector3D'")

        return acos( this.Dot(vec) / ( this.Length() * vec.Length() ) );
    }

}

class Vector
{
    init(...)
    {
        ::assert(vargs in @R'n@, "expected real number list");
        this.vals = vargs;
    }
    
    vals = []

    function Length()
    {
        return pow(sum(map($(x) x**2, this.vals)),0.5)
    }

    function Scale(scale)
    {
        ::assert(scale in @R@, "expected numeric value for 'Scale' of 'Vector'")

        return parse(Vector, map($(x) x*scale, this.vals));
    }

    // Meta methods
    function _ADD(vec)
    {
        ::assert(vec instanceof Vector, "expected 'Vector' type for '+' of 'Vector'")
        ::assert(vec.vals.len() ==  this.vals.len(), "expected same size vector for '+' of 'Vector'")
        var i = 0
        return parse(Vector, map($(x) vec.vals[i++] + x, this.vals));
    }

    function _SUB(vec)
    {
        ::assert(vec instanceof Vector, "expected 'Vector' type for '-' of 'Vector'")
        ::assert(vec.vals.len() ==  this.vals.len(), "expected same size vector for '-' of 'Vector'")
        var i = 0
        return parse(Vector, map($(x) vec.vals[i++] - x, this.vals));
    }

    function _MLT(vec)
    {
        ::assert(vec instanceof Vector, "expected 'Vector' type for '*' of 'Vector'")
        ::assert(vec.vals.len() ==  this.vals.len(), "expected same size vector for '*' of 'Vector'")
        var i = 0
        return parse(Vector, map($(x) vec.vals[i++] * x, this.vals));
    }

    function _DIV(vec)
    {
        ::assert(vec instanceof Vector, "expected 'Vector' type for '/' of 'Vector'")
        ::assert(vec.vals.len() ==  this.vals.len(), "expected same size vector for '/' of 'Vector'")
        var i = 0
        return parse(Vector, map($(x) vec.vals[i++] / x, this.vals));
    }

    function _MOD(vec)
    {
        ::assert(vec instanceof Vector, "expected 'Vector' type for '%' of 'Vector'")
        ::assert(vec.vals.len() ==  this.vals.len(), "expected same size vector for '%' of 'Vector'")
        var i = 0
        return parse(Vector, map($(x) vec.vals[i++] % x, this.vals));
    }

    function _EXP(vec)
    {
        ::assert(vec instanceof Vector, "expected 'Vector' type for '**' of 'Vector'")
        ::assert(vec.vals.len() ==  this.vals.len(), "expected same size vector for '**' of 'Vector'")
        return parse(Vector, map($(x,i) vec.vals[i] ** x, this.vals, range(vec.vals.len())));
    }

    function _STRING()
    {
        return "Vector("+string(this.vals)+")";
    }
    //

    function Dot(vec)
    {
        ::assert(vec instanceof Vector, "expected 'Vector' type for 'Vector.Dot'")
        ::assert(vec.vals.len() ==  this.vals.len(), "expected same size vector for 'Vector.Dot'")
        var i = 0
        return iter($(prev,curr,idx) prev + curr, map($(x) vec.vals[i++] * x, this.vals), 0);
    }

    function Cross(vec)
    {
        ::assert(vec instanceof Vector, "expected 'Vector' type for 'Cross' of 'Vector'")
        ::assert(vec.vals.len() ==  this.vals.len(), "expected same size vector for 'Vector.Cross'")

        return this.vals.len() == 3 ? Vector(this.vals[1] * vec.vals[2] - this.vals[2] * vec.vals[1], this.vals[2] * vec.vals[0] - this.vals[0] * vec.vals[2], this.vals[0] * vec.vals[1] - this.vals[1] * vec.vals[0]) : null;
    }

    function AngleBetween(vec)
    {
        ::assert(vec instanceof Vector, "expected 'Vector' type for 'AngleBetween' of 'Vector'")
        ::assert(vec.vals.len() ==  this.vals.len(), "expected same size vector for 'Vector.AngleBetween'")

        return acos( this.Dot(vec) / ( this.Length() * vec.Length() ) );
    }

    function DistanceBetween(vec)
    {
        ::assert(typeof vec is typeof Vector, "expected 'Vector' type for 'DistanceBetween' of 'Vector'")
        ::assert(this.vals.len() == vec.vals.len(),"expected same size vector for 'Vector.DistanceBetween'")

        return parse(sum, map($(x,y) (x-y)**2 , this.vals, vec.vals))**0.5
    }

    function UnitVector()
    {
        var length = float(Length());
        return parse(Vector, map($(x) x/length, this.vals));
    }
}

class Formula
{
    init(eq, params)
    {
        this.eq = eq
        this.params = params
    }

    eq = ""
    params = []

    function _STRING()
    {
        return parse(format,[this.eq].extend(this.params))
    }
    
    function GetFunction(args)
    {
        ::assert(typeof args is typeof [], "expected list of arguments")
        ::assert(args.len() is params.len(), "expected same length as parameters array")

        return compile("return " + parse(format,[this.eq].extend(args)))
    }
}
