/*
    This an example class
*/
class MyClass
{
    init(m1, m2=false, m3=15)
    {
        // Do type checks
        ::assert(type(m3) in ["INTEGER", "FLOAT"], "expected INTEGER or FLOAT for member_3")
        
        member_1 = m1;
        member_2 = m2;
        member_3 = m3;
    }
    
    // These member attributes can only be used with MyClass.get_attr() method
    /. 
        my_attribute = "hello" 
    ./
    member_1 = null;

    /. 
        my_attribute = 123,
        some_other_attribute = "yep"
    ./
    member_2 = false

    member_3 = null;

    member_4 = 0;

    function MyMethod()
    {
        return member_3 == null ? 0 : member_3;
    }

    /. 
        method_atrribute_1 = "first method first attr"
        method_atrribute_2 = "first method second attr"
    ./
    function MyAttrMethod()
    {
        if(get_attr("MyAttrMethod","method_atrribute_1") == null)
        {
            return "method_atrribute_1 is empty!";
        }
        return "method_atrribute_1 is: " + MyAttrMethod.method_atrribute_1;
    }

    /. 
        method_atrribute_1 = "second method first attr"
    ./
    function MyOtherMethod(arg1, arg2 = 10)
    {
        member_3 = arg1;
        if(arg2 > 10)
        {
            member_4 += string(arg2);
        }
    }
    
    // Meta methods
    function _ADD(other)
    {
        ::assert(other instanceof MyClass, "expected 'MyClass' type for '+' of 'MyClass'")

        return MyClass(this.member_1, this.member_2, this.member_3 + other.member_3);
    }

    function _STRING()
    {
        return "MyClass<"+this.member_4+">("+this.member_1+", "+this.member_2+", "+this.member_3+")";
    }
}

printl("---------------------")
printl(MyClass)

// Create instances
var myinstance_1 = MyClass(10)
var myinstance_2 = MyClass(-50,true)

// Examples of _STRING meta method being used
printl("---------------------")
printl(myinstance_1)
printl(string(myinstance_2))

// _ADD and _STRING meta method example
printl("---------------------")
printl(myinstance_1 + myinstance_2)

// Access to attributes of methods and members
printl("---------------------")
printl(">>> Accessing method attributes")
printl(MyClass.MyAttrMethod.method_atrribute_1)
printl(myinstance_1.MyAttrMethod.method_atrribute_1)
printl(MyClass.get_attr("MyAttrMethod","method_atrribute_1"))

printl("---------------------")
printl(">>> Accessing field attributes")
printl(MyClass.get_attr("member_1","my_attribute"))
printl(MyClass.get_attr("member_2","my_attribute"))

printl("---------------------")
printl(">>> Check member/method presence")
printl("member_1" in MyClass)
printl("MyAttrMethod" in MyClass)
printl("non_existant_member" in MyClass)

printl("---------------------")
printl(">>> Check attributes presence")
printl(MyClass.has_attr("member_1","my_attribute"))
printl(MyClass.has_attr("member_2","bla_bla_bleh"))

printl("---------------------")
printl(">>> Modifying method attributes 1")

printl(MyClass.get_attr("MyAttrMethod","method_atrribute_1"))
printl(myinstance_1.MyAttrMethod())
printl(myinstance_1.MyAttrMethod.method_atrribute_1)
MyClass.set_attr("MyAttrMethod","method_atrribute_1",null)

printl(MyClass.get_attr("MyAttrMethod","method_atrribute_1"))
printl(myinstance_1.MyAttrMethod())
printl(myinstance_1.MyAttrMethod.method_atrribute_1)

printl("---------------------")
printl(">>> Modifying method attributes 2")

printl(MyClass.get_attr("MyAttrMethod","method_atrribute_2"))
printl(myinstance_1.MyAttrMethod.method_atrribute_2)
myinstance_1.MyAttrMethod.method_atrribute_2 = null

printl(myinstance_1.MyAttrMethod.method_atrribute_2)
printl(myinstance_2.MyAttrMethod.method_atrribute_2)

myinstance_1.set_attr("MyAttrMethod","method_atrribute_2", "its back!")
printl(myinstance_1.MyAttrMethod.method_atrribute_2)
printl(myinstance_2.MyAttrMethod.method_atrribute_2)

// Create a new method for MyClass class
::MyClass.NewMethod <> function(x)
{
    return this.member_4 < x;
}
printl("---------------------")
printl(myinstance_1.member_4 = 1e+5)
printl(myinstance_1.NewMethod(0))
printl(myinstance_2.member_4)
printl(myinstance_2.NewMethod(50))