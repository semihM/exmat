// Available globally
function Bar(x)
{
    if(x < 0)   
        return -1
    else
    {
        printl("Yay "+x+" is positive!")
        return x
    }
}
printl(typeof Bar)
printl(Bar)
printl(Bar(12))
printl(Bar(-55))
printl("Bar has "+Bar.n_params+" parameters")
printl("/////////////////////////")

// Only available in this file
var function Foo(x,y,z=1)
{
    return [x,y,z]
}
printl(typeof Foo)
printl(Foo)
printl(Foo(22,44))
printl(Foo(1,3,5))
printl("Foo has "+Foo.n_params+" parameters")
printl("Foo has "+Foo.n_defparams+" default valued parameters")
printl("Foo requires at least "+Foo.n_minargs+" arguments")

// Available globally
function Ex(a,b=3)
{
    return a == b ? true : b == 3;
}

printl(typeof Ex)
printl(Ex)
printl(Ex(3))
printl(Ex(77))
printl(Ex(0,1))
printl("Ex has "+Ex.n_params+" parameters")
printl("Ex has "+Ex.n_defparams+" default valued parameters")
printl("Ex requires at least "+Ex.n_minargs+" arguments")
printl("Ex function's default value dictionary(parameter# = def_value):\n"+string(Ex.defparams))
printl("/////////////////////////")

// Available globally
::GlobalFunction = function(x)
{
    return x+": this function is in the root dictionary (like Ex and Bar)!"
}
printl(typeof GlobalFunction)
printl(GlobalFunction)
printl(GlobalFunction(5))

var Lambda = $(x,y=3) exp(x + y)
printl("Lambda is a '$' lambda expression")
printl(Lambda)
printl(Lambda(2))
printl(Lambda(-2,5))
