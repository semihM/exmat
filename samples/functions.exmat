function Foo(x)     // Fonksiyon tanımı
{ 
    if(x < 0)    
        return -1 
    else 
    { 
        printl(x + " pozitif!")
        return x * 2
    } 
} 
printl(typeof Foo)  // CLOSURE
printl(Foo)         // CLOSURE(Foo, 1 parameters)
printl(Foo(12))     // 24
printl(Foo(-55))    // -1
printl("Foo "+Foo.n_params+" parametreye sahip")

printl($(x,y=3) x * y + 2)         // LAMBDA(2 params (min:1))
printl(typeof $(x,y=3) x * y + 2)  // CLOSURE
printl(($(x,y=3) x * y + 2)(3))    // 11

var Bar = function(x=3,y=2,z=1)
{
    return x * y + z
}
printl("Bar" in this)   // false

function Bar(...)
{
    return vargs
}
printl("Bar" in this)   // true

printl(Bar())       // 3 * 2 + 1 = 7
printl(::Bar())     // []
printl(this.Bar())  // []

printl(Bar is this.Bar)     // false
printl(Bar is ::Bar)        // false
printl(this.Bar is ::Bar)   // true

// Available globally
function Ex(a,b=3)
{
    return a == b ? true : b == 3;
}

printl(typeof Ex)
printl(Ex)
printl(Ex(3))
printl(Ex(77))
printl(Ex(0,1))
printl("Ex has "+Ex.n_params+" parameters")
printl("Ex has "+Ex.n_defparams+" default valued parameters")
printl("Ex requires at least "+Ex.n_minargs+" arguments")
printl("Ex function's default value dictionary(parameter# = def_value):\n"+string(Ex.defparams))
printl("/////////////////////////")

// Available globally
::GlobalFunction = function(x)
{
    return x+": this function is in the root dictionary (like Ex and Bar)!"
}
printl(typeof GlobalFunction)
printl(GlobalFunction)
printl(GlobalFunction(5))

// Lambda expressions
var Lambda = $(x,y=3) exp(x + y)
printl("Lambda is a '$' lambda expression")
printl(Lambda)
printl(Lambda(2))
printl(Lambda(-2,5))

// Variable parameter count
function VFunc(p1,p2,...)
{
    return string(p1) + " " + string(p2) + " | vargs: " + string(vargs);
}
printl("VFunc has variable parameter count")
printl(VFunc)
printl(VFunc.vargs)
printl(VFunc(2,5,"this is in vargs list!","here are some numbers next",1,2,3,4))
printl(VFunc(-5555,"nothing will be in vargs =>"))